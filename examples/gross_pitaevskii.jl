## Gross-Pitaevskii equation: -1/2 Δ ψ + V ψ + 2C |ψ|^2 ψ = λ ψ, ||ψ||_L^2 = 1

using DFTK
using PyPlot
using LinearAlgebra

Ecut = 5000
# Nonlinearity : energy C ∫ρ^α
C = 1.0
α = 2

# Unit cell. Having two lattice vectors as zero means a 1D system
a = 1
lattice = a .* [[1 0 0.]; [0 0 0]; [0 0 0]]

### potential
# positions of the ions
x1 = 0.15*a
x2 = 0.56 *a
# scale of the gaussian potential generated by the ions
L = 0.05
# ions
pot_real(x) = exp(-(x/L)^2)
pot_fourier(q::T) where {T <: Real} = exp(- (q*L)^2 / 4)
ion = DFTK.WellIon(1, pot_real, pot_fourier)
atoms = [ion => [x1*[1,0,0], x2*[1,0,0]]]

n_electrons = 1  # increase this for fun
# We add the needed terms
terms = [Kinetic(),
         AtomicLocal(),
         PowerNonlinearity(C, α),
]
model = Model(lattice; atoms=atoms, n_electrons=n_electrons, terms=terms,
              spin_polarization=:spinless)  # "spinless fermions"
basis = PlaneWaveBasis(model, Ecut)
x = a * range(0, 1, length=basis.fft_size[1]+1)[1:end-1]

#  scfres = direct_minimization(basis, x_tol=1e-8, f_tol=-1, g_tol=-1)
scfres = self_consistent_field(basis, tol=1e-12)
println()
display(scfres.energies)


#  ρ = real(scfres.ρ.real)[:, 1, 1] # converged density
#  ψ_fourier = scfres.ψ[1][:, 1] # first kpoint, all G components, first eigenvector
#  ψ = G_to_r(basis, basis.kpoints[1], ψ_fourier)[:, 1, 1] # IFFT back to real space
#  @assert sum(abs2.(ψ)) * (x[2]-x[1]) ≈ 1.0

#  # phase fix
#  ψ /= (ψ[div(end, 2)] / abs(ψ[div(end, 2)]))

#  plot(x, DFTK.total_local_potential(scfres.ham)[:,:,1], label = "pot")
#  plot(x, real.(ψ), label="ψreal")
#  plot(x, imag.(ψ), label="ψimag")
#  plot(x, ρ, label="ρ")
#  #  plot(x, abs.(H*ψ - dot(ψ, H*ψ)/dot(ψ, ψ)*ψ), label="residual")
#  legend()
