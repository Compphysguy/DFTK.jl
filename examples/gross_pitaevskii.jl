## Gross-Pitaevskii equation: -1/2 Δ ψ + V ψ + 2C |ψ|^2 ψ = λ ψ, ||ψ||_L^2 = 1

using DFTK
using PyPlot
using LinearAlgebra

Ecut = 4000
# Nonlinearity : energy C ∫ρ^α
C = 1.0
α = 2

# Unit cell. Having two lattice vectors as zero means a 1D system
a = 1
lattice = a .* [[1 0 0.]; [0 0 0]; [0 0 0]]

### potential
# positions of the ions
x1 = 0.0*a
#  x2 = 0.67*a
# scale of the gaussian potential generated by the ions
c = 50.0
# ions
pot_real(x) = exp(-c*x^2)
pot_fourier(q::T) where {T <: Real} = Complex{T}(sqrt(T(pi)/c)exp(-(T(pi)*q)^2/c))
ion = DFTK.WellIon(1, pot_real, pot_fourier)
atoms = [ion => [x1*[1,0,0]]]

n_electrons = 1  # increase this for fun
# We add the needed terms
terms = [Kinetic(),
         AtomicLocal(),
         #  PowerNonlinearity(C, α),
]
model = Model(lattice; atoms=atoms, n_electrons=n_electrons, terms=terms,
              spin_polarization=:spinless)  # "spinless fermions"
basis = PlaneWaveBasis(model, Ecut)
x = a * range(0, 1, length=basis.fft_size[1]+1)[1:end-1]

pot_f = [pot_fourier(norm(model.recip_lattice * G)) * cis(-dot(model.recip_lattice * G, model.lattice * x1*[1,0,0])) / sqrt(model.unit_cell_volume)
         for G in G_vectors(basis)]
display(pot_f)
pot_r = G_to_r(basis, pot_f)

pot_atomic = DFTK.test_pot(basis)
plot(x, pot_real.(x.-x1))
plot(x, pot_r[:,:,1])
plot(x, pot_atomic.potential[:,:,1])
STOP

#  scfres = direct_minimization(basis, x_tol=1e-8, f_tol=-1, g_tol=-1)
scfres = self_consistent_field(basis, tol=1e-12)
println()
display(scfres.energies)

ρ = real(scfres.ρ.real)[:, 1, 1] # converged density
ψ_fourier = scfres.ψ[1][:, 1] # first kpoint, all G components, first eigenvector
ψ = G_to_r(basis, basis.kpoints[1], ψ_fourier)[:, 1, 1] # IFFT back to real space
@assert sum(abs2.(ψ)) * (x[2]-x[1]) ≈ 1.0

# phase fix
ψ /= (ψ[div(end, 2)] / abs(ψ[div(end, 2)]))

# ψ solves -Δ/2 ψ + Vext ψ + C α ρ^(α-1) ψ = λ ψ. Check that with finite differences
#  N = length(x)
#  A = Array(Tridiagonal(-ones(N-1), 2ones(N), -ones(N-1)))
#  A[1, end] = A[end, 1] = -1
#  K = A / ((x[2]-x[1])^2) / 2
#  V = Diagonal(f.(x) + C .* α .* (ρ.^(α-1)))
#  H = K+V

plot(x, real.(ψ), label="ψreal")
plot(x, imag.(ψ), label="ψimag")
plot(x, ρ, label="ρ")
#  plot(x, abs.(H*ψ - dot(ψ, H*ψ)/dot(ψ, ψ)*ψ), label="residual")
legend()
